from vpython import *
import random
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import tkinter as tk
import pandas as pd
from scipy.interpolate import make_interp_spline

# Constants
num_robots = 4
num_obstacles = 4
num_moving_obstacles = 4
space_size = 20
max_speed = 1.0
min_speed = 0.5
moving_obstacle_speed = 0.5
neighbor_radius = 5
obstacle_radius = 0.5
robot_radius = 0.5
target_position = vector(space_size - 5, 0, 0)  # Target at (15, 0, 0)
target_line_y = np.linspace(-space_size / 2, space_size / 2, num_robots)
water_current = vector(0, 0, 0)
current_strength = 0.15
P0 = 101325
rho = 1000
g = 9.81
start_x = -space_size / 2  # Starting x-position (-10)
initial_distance = mag(target_position - vector(start_x, 0, 0))  # Approx 25
intermediate_time = 20  # Fixed intermediate time (e.g., 20 seconds)

# Initialize scene
scene = canvas(title="Underwater Swarm Simulation with Water Current Control", width=600, height=600)
scene.range = space_size
scene.background = vector(0, 0.2, 0.4)
scene.ambient = vector(0.3, 0.3, 0.3)
scene.camera.pos = vector(10, 10, 10)
scene.camera.axis = vector(-10, -10, -10)

# Create robots and velocities
robots = []
velocities = []
master_index = random.randint(0, num_robots - 1)
for i in range(num_robots):
    robot = sphere(pos=vector(start_x, target_line_y[i], 0),
                   radius=robot_radius,
                   color=vector(0, 0, 0.5),
                   make_trail=True,
                   trail_type="points",
                   trail_color=color.white,
                   trail_radius=0.05)
    robots.append(robot)
    velocities.append(vector(random.uniform(0, max_speed), 
                           random.uniform(-max_speed, max_speed), 
                           0))

# Create obstacles
obstacles = []
moving_obstacles = []
for _ in range(num_obstacles):
    obstacle = box(pos=vector(random.uniform(-space_size/2, space_size/2),
                            random.uniform(-space_size/2, space_size/2),
                            0),
                 length=obstacle_radius * 2,
                 height=obstacle_radius * 2,
                 width=obstacle_radius * 2,
                 color=vector(0.5, 0, 0.2))
    obstacles.append(obstacle)
    
for i in range(num_moving_obstacles):
    moving_obstacle = obstacles.pop(random.randint(0, len(obstacles) - 1))
    random_radius = obstacle_radius * random.uniform(1, 3)
    moving_obstacle = cylinder(pos=moving_obstacle.pos,
                             axis=vector(0, 0, 1),
                             radius=random_radius,
                             color=vector(0, 0.8, 0.8),
                             opacity=0.7)
    moving_obstacle.velocity = vector(random.uniform(-moving_obstacle_speed, moving_obstacle_speed), 
                                    random.uniform(-moving_obstacle_speed, moving_obstacle_speed), 
                                    0)
    moving_obstacles.append(moving_obstacle)

# Starting and target lines
starting_line = curve(pos=[vector(-space_size, -space_size/2, 0), vector(-space_size, space_size/2, 0)],
                    color=color.yellow, radius=0.05)
target_line = curve(pos=[vector(target_position.x, -space_size/2, 0), vector(target_position.x, space_size/2, 0)],
                  color=color.yellow, radius=0.05)
current_arrow = arrow(pos=vector(0, space_size / 2 - 1, 0),
                    axis=vector(0, 0, 0),
                    color=color.white,
                    shaftwidth=0.2,
                    visible=False)

# Formations
formations = ['line', 'circle', 'triangle']
current_formation = 0

# Data storage for plotting
time_data = []
positions_data = [[] for _ in range(num_robots)]
velocities_data = [[] for _ in range(num_robots)]
distance_data = [[] for _ in range(num_robots)]
smoothed_distance_data = [[] for _ in range(num_robots)]
simulation_complete = False
final_time = None

# Functions
def set_formation(formation):
    if formation == 'line':
        for i, robot in enumerate(robots):
            robot.pos = vector(start_x, target_line_y[i], 0)
            velocities[i] = vector(0, 0, 0)
            robot.clear_trail()
    elif formation == 'circle':
        radius = 5
        for i, robot in enumerate(robots):
            angle = (2 * np.pi / num_robots) * i
            robot.pos = vector(start_x + radius * np.cos(angle), radius * np.sin(angle), 0)
            velocities[i] = vector(0, 0, 0)
            robot.clear_trail()
    elif formation == 'triangle':
        side_length = 5
        for i, robot in enumerate(robots):
            if i < 3:
                robot.pos = vector(start_x + (side_length / 3) * i, -side_length/2, 0)
            else:
                robot.pos = vector(start_x + (side_length / 3) * (i - 3), side_length/2, 0)
            velocities[i] = vector(0, 0, 0)
            robot.clear_trail()

def change_formation():
    global current_formation
    current_formation = (current_formation + 1) % len(formations)
    set_formation(formations[current_formation])

def deform_swarm():
    for i, robot in enumerate(robots):
        robot.pos = vector(random.uniform(start_x, space_size / 2), 
                         random.uniform(-space_size / 2, space_size / 2), 
                         0)
        velocities[i] = vector(random.uniform(0, max_speed), 
                             random.uniform(-max_speed, max_speed), 
                             0)
        robot.clear_trail()

def set_current_left():
    global water_current, current_arrow
    water_current = vector(-current_strength, 0, 0)
    current_arrow.visible = True
    current_arrow.axis = vector(-2, 0, 0)

def set_current_right():
    global water_current, current_arrow
    water_current = vector(current_strength, 0, 0)
    current_arrow.visible = True
    current_arrow.axis = vector(2, 0, 0)

def calculate_pressure(depth):
    base_pressure = P0 + rho * g * depth
    if water_current.x < 0:
        return base_pressure + 5000
    elif water_current.x > 0:
        return base_pressure - 5000
    return base_pressure

def display_pressure():
    selected_robot_index = random.randint(0, num_robots - 1)
    depth = random.uniform(0, 20)
    pressure = calculate_pressure(depth)
    print(f"Robot {selected_robot_index}: Depth = {depth:.2f} m, Pressure = {pressure:.2f} Pa")

def swarm_behavior():
    global water_current
    for i in range(num_robots):
        cohesion = vector(0, 0, 0)
        separation = vector(0, 0, 0)
        alignment = vector(0, 0, 0)
        count = 0
        for j in range(num_robots):
            if i != j:
                distance = mag(robots[i].pos - robots[j].pos)
                if distance < neighbor_radius:
                    count += 1
                    cohesion += robots[j].pos
                    alignment += velocities[j]
                    separation += (robots[i].pos - robots[j].pos) / (distance**2)
        if count > 0:
            cohesion = (cohesion / count - robots[i].pos) * 0.01
            alignment = (alignment / count - velocities[i]) * 0.05
            separation = separation * 0.1
            velocities[i] += cohesion + alignment + separation
        direction_to_target = (target_position - robots[i].pos).norm()
        velocities[i] += direction_to_target * 0.1
        if water_current.x != 0:
            velocity_magnitude = mag(velocities[i])
            if velocity_magnitude > 0:
                if water_current.x < 0:
                    velocities[i] = velocities[i].norm() * min_speed
                elif water_current.x > 0:
                    velocities[i] = velocities[i].norm() * max_speed
        for obstacle in obstacles:
            distance_to_obstacle = mag(robots[i].pos - obstacle.pos)
            safe_distance = robot_radius + obstacle_radius + 0.5
            if distance_to_obstacle < safe_distance * 1.5:
                avoid_direction = (robots[i].pos - obstacle.pos).norm()
                velocities[i] += avoid_direction * 0.5
            if distance_to_obstacle < safe_distance:
                overlap = safe_distance - distance_to_obstacle
                robots[i].pos += avoid_direction * overlap * 1.5
        for moving_obstacle in moving_obstacles:
            distance_to_obstacle = mag(robots[i].pos - moving_obstacle.pos)
            safe_distance = robot_radius + moving_obstacle.radius + 0.5
            if distance_to_obstacle < safe_distance * 1.5:
                avoid_direction = (robots[i].pos - moving_obstacle.pos).norm()
                velocities[i] += avoid_direction * 0.5
            if distance_to_obstacle < safe_distance:
                overlap = safe_distance - distance_to_obstacle
                robots[i].pos += avoid_direction * overlap * 1.5
        if i == master_index:
            direction_to_target = (target_position - robots[i].pos).norm()
            velocities[i] += direction_to_target * 0.1
        else:
            direction_to_master = (robots[master_index].pos - robots[i].pos).norm()
            velocities[i] += direction_to_master * 0.05
        if robots[i].pos.x >= target_position.x:
            robots[i].pos.x = target_position.x
            robots[i].pos.y = target_line_y[i]
            velocities[i] = vector(0, 0, 0)

def show_graph():
    graph_window = tk.Tk()
    graph_window.title("Robot Distance Traveled Graph")
    fig, ax = plt.subplots(figsize=(10, 6))
    for i in range(num_robots):
        distance_traveled = [pos - start_x for pos in positions_data[i]]
        ax.plot(time_data, distance_traveled, label=f'Robot {i+1}')
        ax.scatter([0], [distance_traveled[0]], s=100, marker='o', color='black')
        if final_time:
            ax.scatter([final_time], [distance_traveled[-1]], s=100, marker='s', color='black')
    ax.set_xlabel('Time (s)', fontsize=12)
    ax.set_ylabel('Distance Traveled from Start (m)', fontsize=12)
    ax.set_title('Position Graph', fontsize=14)
    ax.legend(loc='upper right')
    ax.set_xlim(0, max(40, final_time if final_time else 40))
    ax.grid(True, linestyle='--', alpha=0.6)
    fig.tight_layout()
    canvas = FigureCanvasTkAgg(fig, master=graph_window)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    def on_closing():
        graph_window.destroy()
        plt.close(fig)
    graph_window.protocol("WM_DELETE_WINDOW", on_closing)
    graph_window.mainloop()

def show_velocity_graph():
    graph_window = tk.Tk()
    graph_window.title("Robot Velocity Graph")
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = plt.cm.tab10(np.linspace(0, 1, num_robots))
    for i in range(num_robots):
        speed_data = [mag(vector(v.x, v.y, v.z)) for v in velocities_data[i]]
        x_smooth = np.linspace(0, len(time_data) - 1, 300)
        spline = make_interp_spline(range(len(time_data)), speed_data, k=3)
        y_smooth = spline(x_smooth)
        ax.plot(np.linspace(time_data[0], time_data[-1], 300), y_smooth, color=colors[i], linewidth=2, label=f'Robot {i+1}')
        ax.scatter([0], [speed_data[0]], s=100, marker='o', color='black')
        if final_time:
            ax.scatter([final_time], [speed_data[-1]], s=100, marker='s', color='black')
    ax.set_xlabel('Time (s)', fontsize=12)
    ax.set_ylabel('Speed (m/s)', fontsize=12)
    ax.set_title('Robot Speed Over Time', fontsize=14)
    ax.axhline(0, color='gray', linestyle='--', alpha=0.5)
    ax.legend(loc='upper right')
    ax.set_xlim(0, 200)
    ax.set_ylim(0, 1.5)
    ax.grid(True, linestyle='--', alpha=0.6)
    fig.tight_layout()
    canvas = FigureCanvasTkAgg(fig, master=graph_window)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    def on_closing():
        graph_window.destroy()
        plt.close(fig)
    graph_window.protocol("WM_DELETE_WINDOW", on_closing)
    graph_window.mainloop()

def show_distance_graph():
    graph_window = tk.Tk()
    graph_window.title("Robot Distance Graph")
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = plt.cm.tab10(np.linspace(0, 1, num_robots))
    for i in range(num_robots):
        ax.plot(time_data, smoothed_distance_data[i], color=colors[i], linewidth=2, label=f'Robot {i+1}')
        ax.scatter([0], [smoothed_distance_data[i][0]], s=100, marker='o', color='black')
        if final_time:
            ax.scatter([final_time], [smoothed_distance_data[i][-1]], s=100, marker='s', color='black')
    ax.set_xlabel('Time (s)', fontsize=12)
    ax.set_ylabel('Distance to Target (m)', fontsize=12)
    ax.set_title('Distance Graph', fontsize=14)
    ax.legend(loc='upper right')
    ax.set_xlim(0, max(40, final_time if final_time else 40))
    ax.grid(True, linestyle='--', alpha=0.6)
    fig.tight_layout()
    canvas = FigureCanvasTkAgg(fig, master=graph_window)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    def on_closing():
        graph_window.destroy()
        plt.close(fig)
    graph_window.protocol("WM_DELETE_WINDOW", on_closing)
    graph_window.mainloop()

def show_depth_graph():
    graph_window = tk.Tk()
    graph_window.title("Robot Depth Graph")
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = plt.cm.tab10(np.linspace(0, 1, num_robots))
    
    # Parameters for depth descent
    max_depth = -25  # Maximum depth to reach
    descent_time = 20  # Time to reach max depth (in seconds)
    descent_rate = max_depth / descent_time  # Rate of descent (m/s)

    for i in range(num_robots):
        # Calculate depth based on time
        depth_data = []
        for t in time_data:
            # Linear descent until max_depth is reached
            depth = descent_rate * t
            if depth < max_depth:  # Cap the depth at max_depth
                depth = max_depth
            depth_data.append(depth)
        
        # Ensure the length of time_data and depth_data match
        time_to_plot = time_data[:len(depth_data)]
        
        # Plot the depth data for each robot
        ax.plot(time_to_plot, depth_data, color=colors[i], linewidth=2, label=f'Robot {i+1}')
        ax.scatter([0], [depth_data[0]], s=100, marker='o', color='black')  # Start point
        if final_time and len(depth_data) > 1:
            ax.scatter([final_time], [depth_data[-1]], s=100, marker='s', color='black')  # End point

    ax.set_xlabel('Time (s)', fontsize=12)
    ax.set_ylabel('Depth (m)', fontsize=12)
    ax.set_title('Depth Graph', fontsize=14)
    ax.legend(loc='lower left')  # Keep lower left for visibility with inverted axis
    ax.set_xlim(0, max(40, final_time if final_time else 40))
    ax.set_ylim(-35, 0)  # Set y-axis range from -35 to 0 (fourth quadrant, negative downward)
    ax.grid(True, linestyle='--', alpha=0.6)
    fig.tight_layout()
    
    canvas = FigureCanvasTkAgg(fig, master=graph_window)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    
    def on_closing():
        graph_window.destroy()
        plt.close(fig)
    graph_window.protocol("WM_DELETE_WINDOW", on_closing)
    graph_window.mainloop()
# Tkinter UI setup
root = tk.Tk()
root.title("Control Panel")
root.geometry("200x500+800+100")  # Reduced height back to original since one button is removed

button_style = {
    "font": ("Arial", 10, "bold"),
    "bg": "#4CAF50",
    "fg": "white",
    "activebackground": "#45a049",
    "relief": "raised",
    "bd": 3,
    "width": 15,
    "height": 2
}

tk.Button(root, text="Change Formation", command=change_formation, **button_style).pack(pady=5)
tk.Button(root, text="Disperse Swarm", command=deform_swarm, **button_style).pack(pady=5)
tk.Button(root, text="Current Left", command=set_current_left, **button_style).pack(pady=5)
tk.Button(root, text="Current Right", command=set_current_right, **button_style).pack(pady=5)
tk.Button(root, text="Display Pressure", command=display_pressure, **button_style).pack(pady=5)
tk.Button(root, text="Position Graph", command=show_graph, **button_style).pack(pady=5)
tk.Button(root, text="Velocity Graph", command=show_velocity_graph, **button_style).pack(pady=5)
tk.Button(root, text="Distance Graph", command=show_distance_graph, **button_style).pack(pady=5)
tk.Button(root, text="Depth Graph", command=show_depth_graph, **button_style).pack(pady=5)

# Set initial formation
set_formation('line')

# Simulation loop
dt = 0.1
t = 0
alpha = 0.1

def update_simulation():
    global t, simulation_complete, final_time
    rate(50)
    swarm_behavior()
    for moving_obstacle in moving_obstacles:
        moving_obstacle.pos += moving_obstacle.velocity * dt
        if abs(moving_obstacle.pos.x) > space_size / 2:
            moving_obstacle.velocity.x *= -1
        if abs(moving_obstacle.pos.y) > space_size / 2:
            moving_obstacle.velocity.y *= -1
    for i in range(num_robots):
        robots[i].pos += velocities[i] * dt
        if abs(robots[i].pos.x) > space_size / 2:
            velocities[i].x *= -1
        if abs(robots[i].pos.y) > space_size / 2:
            velocities[i].y *= -1
        if robots[i].pos.x >= target_position.x:
            robots[i].pos.x = target_position.x
            robots[i].pos.y = target_line_y[i]
            velocities[i] = vector(0, 0, 0)

    if not simulation_complete:
        time_data.append(t)
        all_at_target = True
        for i in range(num_robots):
            positions_data[i].append(robots[i].pos.x)
            velocities_data[i].append(vector(velocities[i].x, velocities[i].y, velocities[i].z))
            distance = mag(target_position - robots[i].pos)
            distance_data[i].append(distance)
            if not smoothed_distance_data[i]:
                smoothed_distance_data[i].append(initial_distance)
            else:
                smoothed_value = (1 - alpha) * smoothed_distance_data[i][-1] + alpha * distance
                smoothed_distance_data[i].append(max(smoothed_value, 0))
            if distance > 0.1:
                all_at_target = False
        
        if all_at_target and final_time is None:
            final_time = t
            simulation_complete = True
            num_steps = len(time_data)
            position_df = pd.DataFrame({
                'Time (s)': time_data,
                'Robot 1 Position (m)': positions_data[0],
                'Robot 2 Position (m)': positions_data[1],
                'Robot 3 Position (m)': positions_data[2],
                'Robot 4 Position (m)': positions_data[3]
            })
            position_df.to_csv('position_data.csv', index=False)
            velocity_magnitudes = [[mag(v) for v in velocities_data[i]] for i in range(num_robots)]
            velocity_df = pd.DataFrame({
                'Time (s)': time_data,
                'Robot 1 Speed (m/s)': velocity_magnitudes[0],
                'Robot 2 Speed (m/s)': velocity_magnitudes[1],
                'Robot 3 Speed (m/s)': velocity_magnitudes[2],
                'Robot 4 Speed (m/s)': velocity_magnitudes[3]
            })
            velocity_df.to_csv('velocity_data.csv', index=False)
            distance_df = pd.DataFrame({
                'Time (s)': time_data,
                'Robot 1 Distance (m)': smoothed_distance_data[0],
                'Robot 2 Distance (m)': smoothed_distance_data[1],
                'Robot 3 Distance (m)': smoothed_distance_data[2],
                'Robot 4 Distance (m)': smoothed_distance_data[3]
            })
            distance_df.to_csv('distance_data.csv', index=False)
            print("Data exported to CSV files: position_data.csv, velocity_data.csv, distance_data.csv")
    
    t += dt
    root.after(20, update_simulation)

# Start the simulation
root.after(20, update_simulation)
root.mainloop()
